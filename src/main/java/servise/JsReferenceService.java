/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package servise;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-18")
public class JsReferenceService {

  public interface Iface {

    public JsRefference getJsRefferense() throws org.apache.thrift.TException;

    public Subsection getSubsection(String sectionName, String subsectionName) throws org.apache.thrift.TException;

    public void deleteSubsection(String sectionName, String subsectionName) throws org.apache.thrift.TException;

    public void updateSubsection(String sectionName, Subsection subsection) throws org.apache.thrift.TException;

    public void addSubsection(String sectionName, Subsection subsection) throws org.apache.thrift.TException;

    public void addSection(Section section) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getJsRefferense(org.apache.thrift.async.AsyncMethodCallback<JsRefference> resultHandler) throws org.apache.thrift.TException;

    public void getSubsection(String sectionName, String subsectionName, org.apache.thrift.async.AsyncMethodCallback<Subsection> resultHandler) throws org.apache.thrift.TException;

    public void deleteSubsection(String sectionName, String subsectionName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void updateSubsection(String sectionName, Subsection subsection, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void addSubsection(String sectionName, Subsection subsection, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void addSection(Section section, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public JsRefference getJsRefferense() throws org.apache.thrift.TException
    {
      send_getJsRefferense();
      return recv_getJsRefferense();
    }

    public void send_getJsRefferense() throws org.apache.thrift.TException
    {
      getJsRefferense_args args = new getJsRefferense_args();
      sendBase("getJsRefferense", args);
    }

    public JsRefference recv_getJsRefferense() throws org.apache.thrift.TException
    {
      getJsRefferense_result result = new getJsRefferense_result();
      receiveBase(result, "getJsRefferense");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getJsRefferense failed: unknown result");
    }

    public Subsection getSubsection(String sectionName, String subsectionName) throws org.apache.thrift.TException
    {
      send_getSubsection(sectionName, subsectionName);
      return recv_getSubsection();
    }

    public void send_getSubsection(String sectionName, String subsectionName) throws org.apache.thrift.TException
    {
      getSubsection_args args = new getSubsection_args();
      args.setSectionName(sectionName);
      args.setSubsectionName(subsectionName);
      sendBase("getSubsection", args);
    }

    public Subsection recv_getSubsection() throws org.apache.thrift.TException
    {
      getSubsection_result result = new getSubsection_result();
      receiveBase(result, "getSubsection");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSubsection failed: unknown result");
    }

    public void deleteSubsection(String sectionName, String subsectionName) throws org.apache.thrift.TException
    {
      send_deleteSubsection(sectionName, subsectionName);
      recv_deleteSubsection();
    }

    public void send_deleteSubsection(String sectionName, String subsectionName) throws org.apache.thrift.TException
    {
      deleteSubsection_args args = new deleteSubsection_args();
      args.setSectionName(sectionName);
      args.setSubsectionName(subsectionName);
      sendBase("deleteSubsection", args);
    }

    public void recv_deleteSubsection() throws org.apache.thrift.TException
    {
      deleteSubsection_result result = new deleteSubsection_result();
      receiveBase(result, "deleteSubsection");
      return;
    }

    public void updateSubsection(String sectionName, Subsection subsection) throws org.apache.thrift.TException
    {
      send_updateSubsection(sectionName, subsection);
      recv_updateSubsection();
    }

    public void send_updateSubsection(String sectionName, Subsection subsection) throws org.apache.thrift.TException
    {
      updateSubsection_args args = new updateSubsection_args();
      args.setSectionName(sectionName);
      args.setSubsection(subsection);
      sendBase("updateSubsection", args);
    }

    public void recv_updateSubsection() throws org.apache.thrift.TException
    {
      updateSubsection_result result = new updateSubsection_result();
      receiveBase(result, "updateSubsection");
      return;
    }

    public void addSubsection(String sectionName, Subsection subsection) throws org.apache.thrift.TException
    {
      send_addSubsection(sectionName, subsection);
      recv_addSubsection();
    }

    public void send_addSubsection(String sectionName, Subsection subsection) throws org.apache.thrift.TException
    {
      addSubsection_args args = new addSubsection_args();
      args.setSectionName(sectionName);
      args.setSubsection(subsection);
      sendBase("addSubsection", args);
    }

    public void recv_addSubsection() throws org.apache.thrift.TException
    {
      addSubsection_result result = new addSubsection_result();
      receiveBase(result, "addSubsection");
      return;
    }

    public void addSection(Section section) throws org.apache.thrift.TException
    {
      send_addSection(section);
      recv_addSection();
    }

    public void send_addSection(Section section) throws org.apache.thrift.TException
    {
      addSection_args args = new addSection_args();
      args.setSection(section);
      sendBase("addSection", args);
    }

    public void recv_addSection() throws org.apache.thrift.TException
    {
      addSection_result result = new addSection_result();
      receiveBase(result, "addSection");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getJsRefferense(org.apache.thrift.async.AsyncMethodCallback<JsRefference> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getJsRefferense_call method_call = new getJsRefferense_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getJsRefferense_call extends org.apache.thrift.async.TAsyncMethodCall<JsRefference> {
      public getJsRefferense_call(org.apache.thrift.async.AsyncMethodCallback<JsRefference> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getJsRefferense", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getJsRefferense_args args = new getJsRefferense_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public JsRefference getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getJsRefferense();
      }
    }

    public void getSubsection(String sectionName, String subsectionName, org.apache.thrift.async.AsyncMethodCallback<Subsection> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSubsection_call method_call = new getSubsection_call(sectionName, subsectionName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSubsection_call extends org.apache.thrift.async.TAsyncMethodCall<Subsection> {
      private String sectionName;
      private String subsectionName;
      public getSubsection_call(String sectionName, String subsectionName, org.apache.thrift.async.AsyncMethodCallback<Subsection> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sectionName = sectionName;
        this.subsectionName = subsectionName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSubsection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSubsection_args args = new getSubsection_args();
        args.setSectionName(sectionName);
        args.setSubsectionName(subsectionName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Subsection getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSubsection();
      }
    }

    public void deleteSubsection(String sectionName, String subsectionName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSubsection_call method_call = new deleteSubsection_call(sectionName, subsectionName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSubsection_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String sectionName;
      private String subsectionName;
      public deleteSubsection_call(String sectionName, String subsectionName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sectionName = sectionName;
        this.subsectionName = subsectionName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSubsection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSubsection_args args = new deleteSubsection_args();
        args.setSectionName(sectionName);
        args.setSubsectionName(subsectionName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void updateSubsection(String sectionName, Subsection subsection, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSubsection_call method_call = new updateSubsection_call(sectionName, subsection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSubsection_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String sectionName;
      private Subsection subsection;
      public updateSubsection_call(String sectionName, Subsection subsection, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sectionName = sectionName;
        this.subsection = subsection;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSubsection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSubsection_args args = new updateSubsection_args();
        args.setSectionName(sectionName);
        args.setSubsection(subsection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void addSubsection(String sectionName, Subsection subsection, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSubsection_call method_call = new addSubsection_call(sectionName, subsection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSubsection_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String sectionName;
      private Subsection subsection;
      public addSubsection_call(String sectionName, Subsection subsection, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sectionName = sectionName;
        this.subsection = subsection;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSubsection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSubsection_args args = new addSubsection_args();
        args.setSectionName(sectionName);
        args.setSubsection(subsection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void addSection(Section section, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSection_call method_call = new addSection_call(section, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSection_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private Section section;
      public addSection_call(Section section, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.section = section;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSection_args args = new addSection_args();
        args.setSection(section);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getJsRefferense", new getJsRefferense());
      processMap.put("getSubsection", new getSubsection());
      processMap.put("deleteSubsection", new deleteSubsection());
      processMap.put("updateSubsection", new updateSubsection());
      processMap.put("addSubsection", new addSubsection());
      processMap.put("addSection", new addSection());
      return processMap;
    }

    public static class getJsRefferense<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getJsRefferense_args> {
      public getJsRefferense() {
        super("getJsRefferense");
      }

      public getJsRefferense_args getEmptyArgsInstance() {
        return new getJsRefferense_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getJsRefferense_result getResult(I iface, getJsRefferense_args args) throws org.apache.thrift.TException {
        getJsRefferense_result result = new getJsRefferense_result();
        result.success = iface.getJsRefferense();
        return result;
      }
    }

    public static class getSubsection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSubsection_args> {
      public getSubsection() {
        super("getSubsection");
      }

      public getSubsection_args getEmptyArgsInstance() {
        return new getSubsection_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSubsection_result getResult(I iface, getSubsection_args args) throws org.apache.thrift.TException {
        getSubsection_result result = new getSubsection_result();
        result.success = iface.getSubsection(args.sectionName, args.subsectionName);
        return result;
      }
    }

    public static class deleteSubsection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSubsection_args> {
      public deleteSubsection() {
        super("deleteSubsection");
      }

      public deleteSubsection_args getEmptyArgsInstance() {
        return new deleteSubsection_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteSubsection_result getResult(I iface, deleteSubsection_args args) throws org.apache.thrift.TException {
        deleteSubsection_result result = new deleteSubsection_result();
        iface.deleteSubsection(args.sectionName, args.subsectionName);
        return result;
      }
    }

    public static class updateSubsection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSubsection_args> {
      public updateSubsection() {
        super("updateSubsection");
      }

      public updateSubsection_args getEmptyArgsInstance() {
        return new updateSubsection_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSubsection_result getResult(I iface, updateSubsection_args args) throws org.apache.thrift.TException {
        updateSubsection_result result = new updateSubsection_result();
        iface.updateSubsection(args.sectionName, args.subsection);
        return result;
      }
    }

    public static class addSubsection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSubsection_args> {
      public addSubsection() {
        super("addSubsection");
      }

      public addSubsection_args getEmptyArgsInstance() {
        return new addSubsection_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSubsection_result getResult(I iface, addSubsection_args args) throws org.apache.thrift.TException {
        addSubsection_result result = new addSubsection_result();
        iface.addSubsection(args.sectionName, args.subsection);
        return result;
      }
    }

    public static class addSection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSection_args> {
      public addSection() {
        super("addSection");
      }

      public addSection_args getEmptyArgsInstance() {
        return new addSection_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSection_result getResult(I iface, addSection_args args) throws org.apache.thrift.TException {
        addSection_result result = new addSection_result();
        iface.addSection(args.section);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getJsRefferense", new getJsRefferense());
      processMap.put("getSubsection", new getSubsection());
      processMap.put("deleteSubsection", new deleteSubsection());
      processMap.put("updateSubsection", new updateSubsection());
      processMap.put("addSubsection", new addSubsection());
      processMap.put("addSection", new addSection());
      return processMap;
    }

    public static class getJsRefferense<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getJsRefferense_args, JsRefference> {
      public getJsRefferense() {
        super("getJsRefferense");
      }

      public getJsRefferense_args getEmptyArgsInstance() {
        return new getJsRefferense_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<JsRefference> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<JsRefference>() { 
          public void onComplete(JsRefference o) {
            getJsRefferense_result result = new getJsRefferense_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getJsRefferense_result result = new getJsRefferense_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getJsRefferense_args args, org.apache.thrift.async.AsyncMethodCallback<JsRefference> resultHandler) throws org.apache.thrift.TException {
        iface.getJsRefferense(resultHandler);
      }
    }

    public static class getSubsection<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSubsection_args, Subsection> {
      public getSubsection() {
        super("getSubsection");
      }

      public getSubsection_args getEmptyArgsInstance() {
        return new getSubsection_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Subsection> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Subsection>() { 
          public void onComplete(Subsection o) {
            getSubsection_result result = new getSubsection_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSubsection_result result = new getSubsection_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSubsection_args args, org.apache.thrift.async.AsyncMethodCallback<Subsection> resultHandler) throws org.apache.thrift.TException {
        iface.getSubsection(args.sectionName, args.subsectionName,resultHandler);
      }
    }

    public static class deleteSubsection<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteSubsection_args, Void> {
      public deleteSubsection() {
        super("deleteSubsection");
      }

      public deleteSubsection_args getEmptyArgsInstance() {
        return new deleteSubsection_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteSubsection_result result = new deleteSubsection_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteSubsection_result result = new deleteSubsection_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteSubsection_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.deleteSubsection(args.sectionName, args.subsectionName,resultHandler);
      }
    }

    public static class updateSubsection<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSubsection_args, Void> {
      public updateSubsection() {
        super("updateSubsection");
      }

      public updateSubsection_args getEmptyArgsInstance() {
        return new updateSubsection_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateSubsection_result result = new updateSubsection_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateSubsection_result result = new updateSubsection_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSubsection_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.updateSubsection(args.sectionName, args.subsection,resultHandler);
      }
    }

    public static class addSubsection<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSubsection_args, Void> {
      public addSubsection() {
        super("addSubsection");
      }

      public addSubsection_args getEmptyArgsInstance() {
        return new addSubsection_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addSubsection_result result = new addSubsection_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addSubsection_result result = new addSubsection_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSubsection_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.addSubsection(args.sectionName, args.subsection,resultHandler);
      }
    }

    public static class addSection<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSection_args, Void> {
      public addSection() {
        super("addSection");
      }

      public addSection_args getEmptyArgsInstance() {
        return new addSection_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addSection_result result = new addSection_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addSection_result result = new addSection_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSection_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.addSection(args.section,resultHandler);
      }
    }

  }

  public static class getJsRefferense_args implements org.apache.thrift.TBase<getJsRefferense_args, getJsRefferense_args._Fields>, java.io.Serializable, Cloneable, Comparable<getJsRefferense_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJsRefferense_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getJsRefferense_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getJsRefferense_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJsRefferense_args.class, metaDataMap);
    }

    public getJsRefferense_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJsRefferense_args(getJsRefferense_args other) {
    }

    public getJsRefferense_args deepCopy() {
      return new getJsRefferense_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJsRefferense_args)
        return this.equals((getJsRefferense_args)that);
      return false;
    }

    public boolean equals(getJsRefferense_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getJsRefferense_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJsRefferense_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJsRefferense_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getJsRefferense_argsStandardScheme getScheme() {
        return new getJsRefferense_argsStandardScheme();
      }
    }

    private static class getJsRefferense_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getJsRefferense_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getJsRefferense_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getJsRefferense_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJsRefferense_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getJsRefferense_argsTupleScheme getScheme() {
        return new getJsRefferense_argsTupleScheme();
      }
    }

    private static class getJsRefferense_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getJsRefferense_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getJsRefferense_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getJsRefferense_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getJsRefferense_result implements org.apache.thrift.TBase<getJsRefferense_result, getJsRefferense_result._Fields>, java.io.Serializable, Cloneable, Comparable<getJsRefferense_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJsRefferense_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getJsRefferense_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getJsRefferense_resultTupleSchemeFactory();

    public JsRefference success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JsRefference.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJsRefferense_result.class, metaDataMap);
    }

    public getJsRefferense_result() {
    }

    public getJsRefferense_result(
      JsRefference success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJsRefferense_result(getJsRefferense_result other) {
      if (other.isSetSuccess()) {
        this.success = new JsRefference(other.success);
      }
    }

    public getJsRefferense_result deepCopy() {
      return new getJsRefferense_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public JsRefference getSuccess() {
      return this.success;
    }

    public getJsRefferense_result setSuccess(JsRefference success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JsRefference)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJsRefferense_result)
        return this.equals((getJsRefferense_result)that);
      return false;
    }

    public boolean equals(getJsRefferense_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getJsRefferense_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJsRefferense_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJsRefferense_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getJsRefferense_resultStandardScheme getScheme() {
        return new getJsRefferense_resultStandardScheme();
      }
    }

    private static class getJsRefferense_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getJsRefferense_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getJsRefferense_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JsRefference();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getJsRefferense_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJsRefferense_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getJsRefferense_resultTupleScheme getScheme() {
        return new getJsRefferense_resultTupleScheme();
      }
    }

    private static class getJsRefferense_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getJsRefferense_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getJsRefferense_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getJsRefferense_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new JsRefference();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSubsection_args implements org.apache.thrift.TBase<getSubsection_args, getSubsection_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSubsection_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubsection_args");

    private static final org.apache.thrift.protocol.TField SECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SUBSECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("subsectionName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSubsection_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSubsection_argsTupleSchemeFactory();

    public String sectionName; // required
    public String subsectionName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECTION_NAME((short)1, "sectionName"),
      SUBSECTION_NAME((short)2, "subsectionName");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECTION_NAME
            return SECTION_NAME;
          case 2: // SUBSECTION_NAME
            return SUBSECTION_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("sectionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUBSECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("subsectionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubsection_args.class, metaDataMap);
    }

    public getSubsection_args() {
    }

    public getSubsection_args(
      String sectionName,
      String subsectionName)
    {
      this();
      this.sectionName = sectionName;
      this.subsectionName = subsectionName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubsection_args(getSubsection_args other) {
      if (other.isSetSectionName()) {
        this.sectionName = other.sectionName;
      }
      if (other.isSetSubsectionName()) {
        this.subsectionName = other.subsectionName;
      }
    }

    public getSubsection_args deepCopy() {
      return new getSubsection_args(this);
    }

    @Override
    public void clear() {
      this.sectionName = null;
      this.subsectionName = null;
    }

    public String getSectionName() {
      return this.sectionName;
    }

    public getSubsection_args setSectionName(String sectionName) {
      this.sectionName = sectionName;
      return this;
    }

    public void unsetSectionName() {
      this.sectionName = null;
    }

    /** Returns true if field sectionName is set (has been assigned a value) and false otherwise */
    public boolean isSetSectionName() {
      return this.sectionName != null;
    }

    public void setSectionNameIsSet(boolean value) {
      if (!value) {
        this.sectionName = null;
      }
    }

    public String getSubsectionName() {
      return this.subsectionName;
    }

    public getSubsection_args setSubsectionName(String subsectionName) {
      this.subsectionName = subsectionName;
      return this;
    }

    public void unsetSubsectionName() {
      this.subsectionName = null;
    }

    /** Returns true if field subsectionName is set (has been assigned a value) and false otherwise */
    public boolean isSetSubsectionName() {
      return this.subsectionName != null;
    }

    public void setSubsectionNameIsSet(boolean value) {
      if (!value) {
        this.subsectionName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECTION_NAME:
        if (value == null) {
          unsetSectionName();
        } else {
          setSectionName((String)value);
        }
        break;

      case SUBSECTION_NAME:
        if (value == null) {
          unsetSubsectionName();
        } else {
          setSubsectionName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECTION_NAME:
        return getSectionName();

      case SUBSECTION_NAME:
        return getSubsectionName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECTION_NAME:
        return isSetSectionName();
      case SUBSECTION_NAME:
        return isSetSubsectionName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubsection_args)
        return this.equals((getSubsection_args)that);
      return false;
    }

    public boolean equals(getSubsection_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sectionName = true && this.isSetSectionName();
      boolean that_present_sectionName = true && that.isSetSectionName();
      if (this_present_sectionName || that_present_sectionName) {
        if (!(this_present_sectionName && that_present_sectionName))
          return false;
        if (!this.sectionName.equals(that.sectionName))
          return false;
      }

      boolean this_present_subsectionName = true && this.isSetSubsectionName();
      boolean that_present_subsectionName = true && that.isSetSubsectionName();
      if (this_present_subsectionName || that_present_subsectionName) {
        if (!(this_present_subsectionName && that_present_subsectionName))
          return false;
        if (!this.subsectionName.equals(that.subsectionName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSectionName()) ? 131071 : 524287);
      if (isSetSectionName())
        hashCode = hashCode * 8191 + sectionName.hashCode();

      hashCode = hashCode * 8191 + ((isSetSubsectionName()) ? 131071 : 524287);
      if (isSetSubsectionName())
        hashCode = hashCode * 8191 + subsectionName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSubsection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSectionName()).compareTo(other.isSetSectionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSectionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sectionName, other.sectionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubsectionName()).compareTo(other.isSetSubsectionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubsectionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subsectionName, other.subsectionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubsection_args(");
      boolean first = true;

      sb.append("sectionName:");
      if (this.sectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.sectionName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subsectionName:");
      if (this.subsectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.subsectionName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubsection_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSubsection_argsStandardScheme getScheme() {
        return new getSubsection_argsStandardScheme();
      }
    }

    private static class getSubsection_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSubsection_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubsection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sectionName = iprot.readString();
                struct.setSectionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SUBSECTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.subsectionName = iprot.readString();
                struct.setSubsectionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubsection_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sectionName != null) {
          oprot.writeFieldBegin(SECTION_NAME_FIELD_DESC);
          oprot.writeString(struct.sectionName);
          oprot.writeFieldEnd();
        }
        if (struct.subsectionName != null) {
          oprot.writeFieldBegin(SUBSECTION_NAME_FIELD_DESC);
          oprot.writeString(struct.subsectionName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubsection_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSubsection_argsTupleScheme getScheme() {
        return new getSubsection_argsTupleScheme();
      }
    }

    private static class getSubsection_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSubsection_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubsection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSectionName()) {
          optionals.set(0);
        }
        if (struct.isSetSubsectionName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSectionName()) {
          oprot.writeString(struct.sectionName);
        }
        if (struct.isSetSubsectionName()) {
          oprot.writeString(struct.subsectionName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubsection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sectionName = iprot.readString();
          struct.setSectionNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.subsectionName = iprot.readString();
          struct.setSubsectionNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSubsection_result implements org.apache.thrift.TBase<getSubsection_result, getSubsection_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSubsection_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubsection_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSubsection_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSubsection_resultTupleSchemeFactory();

    public Subsection success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Subsection.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubsection_result.class, metaDataMap);
    }

    public getSubsection_result() {
    }

    public getSubsection_result(
      Subsection success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubsection_result(getSubsection_result other) {
      if (other.isSetSuccess()) {
        this.success = new Subsection(other.success);
      }
    }

    public getSubsection_result deepCopy() {
      return new getSubsection_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Subsection getSuccess() {
      return this.success;
    }

    public getSubsection_result setSuccess(Subsection success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Subsection)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubsection_result)
        return this.equals((getSubsection_result)that);
      return false;
    }

    public boolean equals(getSubsection_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSubsection_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubsection_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubsection_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSubsection_resultStandardScheme getScheme() {
        return new getSubsection_resultStandardScheme();
      }
    }

    private static class getSubsection_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSubsection_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubsection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Subsection();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubsection_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubsection_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSubsection_resultTupleScheme getScheme() {
        return new getSubsection_resultTupleScheme();
      }
    }

    private static class getSubsection_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSubsection_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubsection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubsection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Subsection();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteSubsection_args implements org.apache.thrift.TBase<deleteSubsection_args, deleteSubsection_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSubsection_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSubsection_args");

    private static final org.apache.thrift.protocol.TField SECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SUBSECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("subsectionName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteSubsection_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteSubsection_argsTupleSchemeFactory();

    public String sectionName; // required
    public String subsectionName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECTION_NAME((short)1, "sectionName"),
      SUBSECTION_NAME((short)2, "subsectionName");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECTION_NAME
            return SECTION_NAME;
          case 2: // SUBSECTION_NAME
            return SUBSECTION_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("sectionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUBSECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("subsectionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSubsection_args.class, metaDataMap);
    }

    public deleteSubsection_args() {
    }

    public deleteSubsection_args(
      String sectionName,
      String subsectionName)
    {
      this();
      this.sectionName = sectionName;
      this.subsectionName = subsectionName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSubsection_args(deleteSubsection_args other) {
      if (other.isSetSectionName()) {
        this.sectionName = other.sectionName;
      }
      if (other.isSetSubsectionName()) {
        this.subsectionName = other.subsectionName;
      }
    }

    public deleteSubsection_args deepCopy() {
      return new deleteSubsection_args(this);
    }

    @Override
    public void clear() {
      this.sectionName = null;
      this.subsectionName = null;
    }

    public String getSectionName() {
      return this.sectionName;
    }

    public deleteSubsection_args setSectionName(String sectionName) {
      this.sectionName = sectionName;
      return this;
    }

    public void unsetSectionName() {
      this.sectionName = null;
    }

    /** Returns true if field sectionName is set (has been assigned a value) and false otherwise */
    public boolean isSetSectionName() {
      return this.sectionName != null;
    }

    public void setSectionNameIsSet(boolean value) {
      if (!value) {
        this.sectionName = null;
      }
    }

    public String getSubsectionName() {
      return this.subsectionName;
    }

    public deleteSubsection_args setSubsectionName(String subsectionName) {
      this.subsectionName = subsectionName;
      return this;
    }

    public void unsetSubsectionName() {
      this.subsectionName = null;
    }

    /** Returns true if field subsectionName is set (has been assigned a value) and false otherwise */
    public boolean isSetSubsectionName() {
      return this.subsectionName != null;
    }

    public void setSubsectionNameIsSet(boolean value) {
      if (!value) {
        this.subsectionName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECTION_NAME:
        if (value == null) {
          unsetSectionName();
        } else {
          setSectionName((String)value);
        }
        break;

      case SUBSECTION_NAME:
        if (value == null) {
          unsetSubsectionName();
        } else {
          setSubsectionName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECTION_NAME:
        return getSectionName();

      case SUBSECTION_NAME:
        return getSubsectionName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECTION_NAME:
        return isSetSectionName();
      case SUBSECTION_NAME:
        return isSetSubsectionName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSubsection_args)
        return this.equals((deleteSubsection_args)that);
      return false;
    }

    public boolean equals(deleteSubsection_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sectionName = true && this.isSetSectionName();
      boolean that_present_sectionName = true && that.isSetSectionName();
      if (this_present_sectionName || that_present_sectionName) {
        if (!(this_present_sectionName && that_present_sectionName))
          return false;
        if (!this.sectionName.equals(that.sectionName))
          return false;
      }

      boolean this_present_subsectionName = true && this.isSetSubsectionName();
      boolean that_present_subsectionName = true && that.isSetSubsectionName();
      if (this_present_subsectionName || that_present_subsectionName) {
        if (!(this_present_subsectionName && that_present_subsectionName))
          return false;
        if (!this.subsectionName.equals(that.subsectionName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSectionName()) ? 131071 : 524287);
      if (isSetSectionName())
        hashCode = hashCode * 8191 + sectionName.hashCode();

      hashCode = hashCode * 8191 + ((isSetSubsectionName()) ? 131071 : 524287);
      if (isSetSubsectionName())
        hashCode = hashCode * 8191 + subsectionName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteSubsection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSectionName()).compareTo(other.isSetSectionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSectionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sectionName, other.sectionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubsectionName()).compareTo(other.isSetSubsectionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubsectionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subsectionName, other.subsectionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSubsection_args(");
      boolean first = true;

      sb.append("sectionName:");
      if (this.sectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.sectionName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subsectionName:");
      if (this.subsectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.subsectionName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSubsection_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteSubsection_argsStandardScheme getScheme() {
        return new deleteSubsection_argsStandardScheme();
      }
    }

    private static class deleteSubsection_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteSubsection_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSubsection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sectionName = iprot.readString();
                struct.setSectionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SUBSECTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.subsectionName = iprot.readString();
                struct.setSubsectionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSubsection_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sectionName != null) {
          oprot.writeFieldBegin(SECTION_NAME_FIELD_DESC);
          oprot.writeString(struct.sectionName);
          oprot.writeFieldEnd();
        }
        if (struct.subsectionName != null) {
          oprot.writeFieldBegin(SUBSECTION_NAME_FIELD_DESC);
          oprot.writeString(struct.subsectionName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSubsection_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteSubsection_argsTupleScheme getScheme() {
        return new deleteSubsection_argsTupleScheme();
      }
    }

    private static class deleteSubsection_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteSubsection_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSubsection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSectionName()) {
          optionals.set(0);
        }
        if (struct.isSetSubsectionName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSectionName()) {
          oprot.writeString(struct.sectionName);
        }
        if (struct.isSetSubsectionName()) {
          oprot.writeString(struct.subsectionName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSubsection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sectionName = iprot.readString();
          struct.setSectionNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.subsectionName = iprot.readString();
          struct.setSubsectionNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteSubsection_result implements org.apache.thrift.TBase<deleteSubsection_result, deleteSubsection_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSubsection_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSubsection_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteSubsection_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteSubsection_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSubsection_result.class, metaDataMap);
    }

    public deleteSubsection_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSubsection_result(deleteSubsection_result other) {
    }

    public deleteSubsection_result deepCopy() {
      return new deleteSubsection_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSubsection_result)
        return this.equals((deleteSubsection_result)that);
      return false;
    }

    public boolean equals(deleteSubsection_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(deleteSubsection_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSubsection_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSubsection_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteSubsection_resultStandardScheme getScheme() {
        return new deleteSubsection_resultStandardScheme();
      }
    }

    private static class deleteSubsection_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteSubsection_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSubsection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSubsection_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSubsection_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteSubsection_resultTupleScheme getScheme() {
        return new deleteSubsection_resultTupleScheme();
      }
    }

    private static class deleteSubsection_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteSubsection_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSubsection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSubsection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateSubsection_args implements org.apache.thrift.TBase<updateSubsection_args, updateSubsection_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSubsection_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSubsection_args");

    private static final org.apache.thrift.protocol.TField SECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SUBSECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("subsection", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateSubsection_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateSubsection_argsTupleSchemeFactory();

    public String sectionName; // required
    public Subsection subsection; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECTION_NAME((short)1, "sectionName"),
      SUBSECTION((short)2, "subsection");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECTION_NAME
            return SECTION_NAME;
          case 2: // SUBSECTION
            return SUBSECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("sectionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUBSECTION, new org.apache.thrift.meta_data.FieldMetaData("subsection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Subsection.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSubsection_args.class, metaDataMap);
    }

    public updateSubsection_args() {
    }

    public updateSubsection_args(
      String sectionName,
      Subsection subsection)
    {
      this();
      this.sectionName = sectionName;
      this.subsection = subsection;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSubsection_args(updateSubsection_args other) {
      if (other.isSetSectionName()) {
        this.sectionName = other.sectionName;
      }
      if (other.isSetSubsection()) {
        this.subsection = new Subsection(other.subsection);
      }
    }

    public updateSubsection_args deepCopy() {
      return new updateSubsection_args(this);
    }

    @Override
    public void clear() {
      this.sectionName = null;
      this.subsection = null;
    }

    public String getSectionName() {
      return this.sectionName;
    }

    public updateSubsection_args setSectionName(String sectionName) {
      this.sectionName = sectionName;
      return this;
    }

    public void unsetSectionName() {
      this.sectionName = null;
    }

    /** Returns true if field sectionName is set (has been assigned a value) and false otherwise */
    public boolean isSetSectionName() {
      return this.sectionName != null;
    }

    public void setSectionNameIsSet(boolean value) {
      if (!value) {
        this.sectionName = null;
      }
    }

    public Subsection getSubsection() {
      return this.subsection;
    }

    public updateSubsection_args setSubsection(Subsection subsection) {
      this.subsection = subsection;
      return this;
    }

    public void unsetSubsection() {
      this.subsection = null;
    }

    /** Returns true if field subsection is set (has been assigned a value) and false otherwise */
    public boolean isSetSubsection() {
      return this.subsection != null;
    }

    public void setSubsectionIsSet(boolean value) {
      if (!value) {
        this.subsection = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECTION_NAME:
        if (value == null) {
          unsetSectionName();
        } else {
          setSectionName((String)value);
        }
        break;

      case SUBSECTION:
        if (value == null) {
          unsetSubsection();
        } else {
          setSubsection((Subsection)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECTION_NAME:
        return getSectionName();

      case SUBSECTION:
        return getSubsection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECTION_NAME:
        return isSetSectionName();
      case SUBSECTION:
        return isSetSubsection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSubsection_args)
        return this.equals((updateSubsection_args)that);
      return false;
    }

    public boolean equals(updateSubsection_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sectionName = true && this.isSetSectionName();
      boolean that_present_sectionName = true && that.isSetSectionName();
      if (this_present_sectionName || that_present_sectionName) {
        if (!(this_present_sectionName && that_present_sectionName))
          return false;
        if (!this.sectionName.equals(that.sectionName))
          return false;
      }

      boolean this_present_subsection = true && this.isSetSubsection();
      boolean that_present_subsection = true && that.isSetSubsection();
      if (this_present_subsection || that_present_subsection) {
        if (!(this_present_subsection && that_present_subsection))
          return false;
        if (!this.subsection.equals(that.subsection))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSectionName()) ? 131071 : 524287);
      if (isSetSectionName())
        hashCode = hashCode * 8191 + sectionName.hashCode();

      hashCode = hashCode * 8191 + ((isSetSubsection()) ? 131071 : 524287);
      if (isSetSubsection())
        hashCode = hashCode * 8191 + subsection.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateSubsection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSectionName()).compareTo(other.isSetSectionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSectionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sectionName, other.sectionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubsection()).compareTo(other.isSetSubsection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubsection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subsection, other.subsection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSubsection_args(");
      boolean first = true;

      sb.append("sectionName:");
      if (this.sectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.sectionName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subsection:");
      if (this.subsection == null) {
        sb.append("null");
      } else {
        sb.append(this.subsection);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (subsection != null) {
        subsection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSubsection_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateSubsection_argsStandardScheme getScheme() {
        return new updateSubsection_argsStandardScheme();
      }
    }

    private static class updateSubsection_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateSubsection_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSubsection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sectionName = iprot.readString();
                struct.setSectionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SUBSECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.subsection = new Subsection();
                struct.subsection.read(iprot);
                struct.setSubsectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSubsection_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sectionName != null) {
          oprot.writeFieldBegin(SECTION_NAME_FIELD_DESC);
          oprot.writeString(struct.sectionName);
          oprot.writeFieldEnd();
        }
        if (struct.subsection != null) {
          oprot.writeFieldBegin(SUBSECTION_FIELD_DESC);
          struct.subsection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSubsection_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateSubsection_argsTupleScheme getScheme() {
        return new updateSubsection_argsTupleScheme();
      }
    }

    private static class updateSubsection_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateSubsection_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSubsection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSectionName()) {
          optionals.set(0);
        }
        if (struct.isSetSubsection()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSectionName()) {
          oprot.writeString(struct.sectionName);
        }
        if (struct.isSetSubsection()) {
          struct.subsection.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSubsection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sectionName = iprot.readString();
          struct.setSectionNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.subsection = new Subsection();
          struct.subsection.read(iprot);
          struct.setSubsectionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateSubsection_result implements org.apache.thrift.TBase<updateSubsection_result, updateSubsection_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSubsection_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSubsection_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateSubsection_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateSubsection_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSubsection_result.class, metaDataMap);
    }

    public updateSubsection_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSubsection_result(updateSubsection_result other) {
    }

    public updateSubsection_result deepCopy() {
      return new updateSubsection_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSubsection_result)
        return this.equals((updateSubsection_result)that);
      return false;
    }

    public boolean equals(updateSubsection_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(updateSubsection_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSubsection_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSubsection_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateSubsection_resultStandardScheme getScheme() {
        return new updateSubsection_resultStandardScheme();
      }
    }

    private static class updateSubsection_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateSubsection_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSubsection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSubsection_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSubsection_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateSubsection_resultTupleScheme getScheme() {
        return new updateSubsection_resultTupleScheme();
      }
    }

    private static class updateSubsection_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateSubsection_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSubsection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSubsection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addSubsection_args implements org.apache.thrift.TBase<addSubsection_args, addSubsection_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSubsection_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSubsection_args");

    private static final org.apache.thrift.protocol.TField SECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SUBSECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("subsection", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addSubsection_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addSubsection_argsTupleSchemeFactory();

    public String sectionName; // required
    public Subsection subsection; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECTION_NAME((short)1, "sectionName"),
      SUBSECTION((short)2, "subsection");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECTION_NAME
            return SECTION_NAME;
          case 2: // SUBSECTION
            return SUBSECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("sectionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUBSECTION, new org.apache.thrift.meta_data.FieldMetaData("subsection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Subsection.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSubsection_args.class, metaDataMap);
    }

    public addSubsection_args() {
    }

    public addSubsection_args(
      String sectionName,
      Subsection subsection)
    {
      this();
      this.sectionName = sectionName;
      this.subsection = subsection;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSubsection_args(addSubsection_args other) {
      if (other.isSetSectionName()) {
        this.sectionName = other.sectionName;
      }
      if (other.isSetSubsection()) {
        this.subsection = new Subsection(other.subsection);
      }
    }

    public addSubsection_args deepCopy() {
      return new addSubsection_args(this);
    }

    @Override
    public void clear() {
      this.sectionName = null;
      this.subsection = null;
    }

    public String getSectionName() {
      return this.sectionName;
    }

    public addSubsection_args setSectionName(String sectionName) {
      this.sectionName = sectionName;
      return this;
    }

    public void unsetSectionName() {
      this.sectionName = null;
    }

    /** Returns true if field sectionName is set (has been assigned a value) and false otherwise */
    public boolean isSetSectionName() {
      return this.sectionName != null;
    }

    public void setSectionNameIsSet(boolean value) {
      if (!value) {
        this.sectionName = null;
      }
    }

    public Subsection getSubsection() {
      return this.subsection;
    }

    public addSubsection_args setSubsection(Subsection subsection) {
      this.subsection = subsection;
      return this;
    }

    public void unsetSubsection() {
      this.subsection = null;
    }

    /** Returns true if field subsection is set (has been assigned a value) and false otherwise */
    public boolean isSetSubsection() {
      return this.subsection != null;
    }

    public void setSubsectionIsSet(boolean value) {
      if (!value) {
        this.subsection = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECTION_NAME:
        if (value == null) {
          unsetSectionName();
        } else {
          setSectionName((String)value);
        }
        break;

      case SUBSECTION:
        if (value == null) {
          unsetSubsection();
        } else {
          setSubsection((Subsection)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECTION_NAME:
        return getSectionName();

      case SUBSECTION:
        return getSubsection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECTION_NAME:
        return isSetSectionName();
      case SUBSECTION:
        return isSetSubsection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSubsection_args)
        return this.equals((addSubsection_args)that);
      return false;
    }

    public boolean equals(addSubsection_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sectionName = true && this.isSetSectionName();
      boolean that_present_sectionName = true && that.isSetSectionName();
      if (this_present_sectionName || that_present_sectionName) {
        if (!(this_present_sectionName && that_present_sectionName))
          return false;
        if (!this.sectionName.equals(that.sectionName))
          return false;
      }

      boolean this_present_subsection = true && this.isSetSubsection();
      boolean that_present_subsection = true && that.isSetSubsection();
      if (this_present_subsection || that_present_subsection) {
        if (!(this_present_subsection && that_present_subsection))
          return false;
        if (!this.subsection.equals(that.subsection))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSectionName()) ? 131071 : 524287);
      if (isSetSectionName())
        hashCode = hashCode * 8191 + sectionName.hashCode();

      hashCode = hashCode * 8191 + ((isSetSubsection()) ? 131071 : 524287);
      if (isSetSubsection())
        hashCode = hashCode * 8191 + subsection.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addSubsection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSectionName()).compareTo(other.isSetSectionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSectionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sectionName, other.sectionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubsection()).compareTo(other.isSetSubsection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubsection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subsection, other.subsection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSubsection_args(");
      boolean first = true;

      sb.append("sectionName:");
      if (this.sectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.sectionName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subsection:");
      if (this.subsection == null) {
        sb.append("null");
      } else {
        sb.append(this.subsection);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (subsection != null) {
        subsection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSubsection_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSubsection_argsStandardScheme getScheme() {
        return new addSubsection_argsStandardScheme();
      }
    }

    private static class addSubsection_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addSubsection_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSubsection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sectionName = iprot.readString();
                struct.setSectionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SUBSECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.subsection = new Subsection();
                struct.subsection.read(iprot);
                struct.setSubsectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSubsection_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sectionName != null) {
          oprot.writeFieldBegin(SECTION_NAME_FIELD_DESC);
          oprot.writeString(struct.sectionName);
          oprot.writeFieldEnd();
        }
        if (struct.subsection != null) {
          oprot.writeFieldBegin(SUBSECTION_FIELD_DESC);
          struct.subsection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSubsection_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSubsection_argsTupleScheme getScheme() {
        return new addSubsection_argsTupleScheme();
      }
    }

    private static class addSubsection_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addSubsection_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSubsection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSectionName()) {
          optionals.set(0);
        }
        if (struct.isSetSubsection()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSectionName()) {
          oprot.writeString(struct.sectionName);
        }
        if (struct.isSetSubsection()) {
          struct.subsection.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSubsection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sectionName = iprot.readString();
          struct.setSectionNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.subsection = new Subsection();
          struct.subsection.read(iprot);
          struct.setSubsectionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addSubsection_result implements org.apache.thrift.TBase<addSubsection_result, addSubsection_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSubsection_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSubsection_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addSubsection_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addSubsection_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSubsection_result.class, metaDataMap);
    }

    public addSubsection_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSubsection_result(addSubsection_result other) {
    }

    public addSubsection_result deepCopy() {
      return new addSubsection_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSubsection_result)
        return this.equals((addSubsection_result)that);
      return false;
    }

    public boolean equals(addSubsection_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(addSubsection_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSubsection_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSubsection_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSubsection_resultStandardScheme getScheme() {
        return new addSubsection_resultStandardScheme();
      }
    }

    private static class addSubsection_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addSubsection_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSubsection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSubsection_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSubsection_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSubsection_resultTupleScheme getScheme() {
        return new addSubsection_resultTupleScheme();
      }
    }

    private static class addSubsection_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addSubsection_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSubsection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSubsection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addSection_args implements org.apache.thrift.TBase<addSection_args, addSection_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSection_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSection_args");

    private static final org.apache.thrift.protocol.TField SECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("section", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addSection_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addSection_argsTupleSchemeFactory();

    public Section section; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECTION((short)1, "section");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECTION
            return SECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECTION, new org.apache.thrift.meta_data.FieldMetaData("section", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Section.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSection_args.class, metaDataMap);
    }

    public addSection_args() {
    }

    public addSection_args(
      Section section)
    {
      this();
      this.section = section;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSection_args(addSection_args other) {
      if (other.isSetSection()) {
        this.section = new Section(other.section);
      }
    }

    public addSection_args deepCopy() {
      return new addSection_args(this);
    }

    @Override
    public void clear() {
      this.section = null;
    }

    public Section getSection() {
      return this.section;
    }

    public addSection_args setSection(Section section) {
      this.section = section;
      return this;
    }

    public void unsetSection() {
      this.section = null;
    }

    /** Returns true if field section is set (has been assigned a value) and false otherwise */
    public boolean isSetSection() {
      return this.section != null;
    }

    public void setSectionIsSet(boolean value) {
      if (!value) {
        this.section = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECTION:
        if (value == null) {
          unsetSection();
        } else {
          setSection((Section)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECTION:
        return getSection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECTION:
        return isSetSection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSection_args)
        return this.equals((addSection_args)that);
      return false;
    }

    public boolean equals(addSection_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_section = true && this.isSetSection();
      boolean that_present_section = true && that.isSetSection();
      if (this_present_section || that_present_section) {
        if (!(this_present_section && that_present_section))
          return false;
        if (!this.section.equals(that.section))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSection()) ? 131071 : 524287);
      if (isSetSection())
        hashCode = hashCode * 8191 + section.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addSection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSection()).compareTo(other.isSetSection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.section, other.section);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSection_args(");
      boolean first = true;

      sb.append("section:");
      if (this.section == null) {
        sb.append("null");
      } else {
        sb.append(this.section);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (section != null) {
        section.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSection_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSection_argsStandardScheme getScheme() {
        return new addSection_argsStandardScheme();
      }
    }

    private static class addSection_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addSection_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.section = new Section();
                struct.section.read(iprot);
                struct.setSectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSection_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.section != null) {
          oprot.writeFieldBegin(SECTION_FIELD_DESC);
          struct.section.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSection_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSection_argsTupleScheme getScheme() {
        return new addSection_argsTupleScheme();
      }
    }

    private static class addSection_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addSection_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSection()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSection()) {
          struct.section.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.section = new Section();
          struct.section.read(iprot);
          struct.setSectionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addSection_result implements org.apache.thrift.TBase<addSection_result, addSection_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSection_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSection_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addSection_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addSection_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSection_result.class, metaDataMap);
    }

    public addSection_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSection_result(addSection_result other) {
    }

    public addSection_result deepCopy() {
      return new addSection_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSection_result)
        return this.equals((addSection_result)that);
      return false;
    }

    public boolean equals(addSection_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(addSection_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSection_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSection_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSection_resultStandardScheme getScheme() {
        return new addSection_resultStandardScheme();
      }
    }

    private static class addSection_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addSection_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSection_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSection_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSection_resultTupleScheme getScheme() {
        return new addSection_resultTupleScheme();
      }
    }

    private static class addSection_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addSection_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
